namespace Polytech.Common.Telemetron
{
    using System;
    using System.Collections.Generic;
    using System.Runtime.CompilerServices;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Polytech.Common.Telemetron;
    using Polytech.Common.Telemetron.Configuration;
    using Polytech.Common.Telemetron.Diagnostics;

    /// <summary>
    /// A telemetron to use when testing code. This can be used with TestHarnesses to pull the telemetry that is naturally generated by the application into the app.
    /// </summary>
    public class TestTelemetron : CorrelatedProviderBase, ITelemetronProvider<byte[]>
    {
        private TestContext testContext;

        public TestTelemetron(IContextualTestClass testclass, ITelemetronConfigurationBase configuration)
            : base(configuration)
        {
            if (testclass == null)
            {
                throw new ArgumentNullException(nameof(testclass));
            }

            if (testclass.TestContext == null)
            {
                throw new ArgumentNullException(nameof(testclass) + '.' + nameof(testclass.TestContext));
            }

            this.testContext = testclass.TestContext;
        }

        public IOperation CreateOperation(string operationName)
        {
            try
            {
                ICorrelationContext localCorrelationcontext = this.CorrelationContext;
                long newOperationId = localCorrelationcontext.AddOperation();
                string cc = localCorrelationcontext.ToString();

                this.CorrelationContext = localCorrelationcontext;

                IOperation createdOperation = new TestOperation(this, operationName, newOperationId.GetBase64String(), cc);

                return createdOperation;
            }
            catch (Exception ex)
            {
                DiagnosticTrace.Instance.Error("An unexpected error occurred when attempting to create an operation", ex, "1f3803c8-5a8c-4562-a96b-7069520d8e32");

                return new NullOperation();
            }

        }

        public IOperation CreateOperation(string operationName, byte[] parentContext)
        {
            try
            {
                byte[] capturedCorrelationContext = this.CorrelationContext.Capture();

                try
                {
                    CorrelationContext localCorrelationcontext = new CorrelationContext(parentContext);

                    long newOperationId = localCorrelationcontext.AddOperation();
                    string cc = localCorrelationcontext.ToString();

                    this.CorrelationContext = localCorrelationcontext;

                    IOperation createdOperation = new TestOperation(this, operationName, newOperationId.GetBase64String(), cc);

                    return createdOperation;
                }
                catch (Exception ex)
                {
                    DiagnosticTrace.Instance.Error("An unexpected error occurred when attempting to create an operation", ex, "cd11de1d-c4b6-406c-937e-37bc85eb4370");

                    return new NullOperation();
                }
                finally
                {
                    this.CorrelationContext = new CorrelationContext(capturedCorrelationContext);
                }
            }
            catch (Exception ex)
            {
                DiagnosticTrace.Instance.Error("An unexpected error occurred when attempting to reinstate the correlation context", ex, "cb64280a-daa2-43e5-b4f5-fc69f7dbfeb1");

                return new NullOperation();
            }
        }

        public bool Event(string name, Dictionary<string, string> data = null)
        {
            throw new NotImplementedException();
        }

        public bool Metric(string name, double value = 1, Dictionary<string, string> data = null)
        {
            throw new NotImplementedException();
        }

        public bool Trace(EventSeverity eventSeverity, string message, string codePoint = null, Dictionary<string, string> data = null, [CallerMemberName] string callerMemberName = "", [CallerFilePath] string callerFilePath = "", [CallerLineNumber] int callerLineNumber = -1)
        {
            throw new NotImplementedException();
        }

        public bool Trace(EventSeverity eventSeverity, string message, Exception exception, string codePoint = null, Dictionary<string, string> data = null, [CallerMemberName] string callerMemberName = "", [CallerFilePath] string callerFilePath = "", [CallerLineNumber] int callerLineNumber = -1)
        {
            throw new NotImplementedException();
        }
    }
}
